{
  "name": "feathers-errors",
  "description": "Convenient error handling for Feathers services.",
  "version": "0.2.1",
  "homepage": "https://github.com/feathersjs/feathers-errors",
  "author": {
    "name": "Eric Kryski",
    "email": "e.kryski@gmail.com"
  },
  "contributors": [
    {
      "name": "David Luecke",
      "email": "daff@neyeon.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/feathersjs/feathers-errors.git"
  },
  "bugs": {
    "url": "https://github.com/feathersjs/feathers-errors/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/feathersjs/feathers-errors/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/errors",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test",
    "start": "grunt"
  },
  "devDependencies": {
    "grunt-cli": "~0.1.7",
    "grunt": "~0.4.1",
    "grunt-release": "~0.5.1",
    "grunt-contrib-jshint": "~0.x",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-watch": "~0.5.3",
    "feathers": ">= 0.3.1",
    "supertest": "~0.9.0",
    "socket.io-client": "^0.9.16"
  },
  "keywords": [
    "feathers-plugin",
    "feathers",
    "errors",
    "error handling"
  ],
  "dependencies": {
    "lodash": "^2.4.1"
  },
  "readme": "# feathers-errors [![Build Status](https://travis-ci.org/feathersjs/feathers-errors.svg?branch=master)](https://travis-ci.org/feathersjs/feathers-errors)\n\n> Error handling mixin for Feathers apps.\n\n## Getting Started\n\nFeathers errors come with feathers by default. So typically you don't need to install it at all. However you can also use `feathers-errors` with express directly as well. In that case you install the module with: `npm install feathers-errors --save`\n\n#### With Feathers\n\n```js\nvar feathers = require('feathers');\nvar memory = require('feathers-memory');\n\nvar app = feathers()\n    .use('/users', memory)\n    .configure(feathers.errors());\n```\n\n#### With Express\n\n```js\nvar app = require('express');\nvar errors = require('feathers-errors');\n\nvar app = express()\n    .use(errors.fourOhFour)\n    .use(errors.handler);\n```\n\n**Pro Tip:** Just like express middleware, **order matters**. So your error handling should typically be configured last.\n\n## Documentation\n\n#### Current Error Types:\n\n* `BadRequest`: 400\n* `NotAuthenticated`: 401\n* `PaymentError`: 402\n* `Forbidden`: 403\n* `NotFound`: 404\n* `MethodNotAllowed`: 405\n* `NotAcceptable`: 406\n* `Timeout`: 408\n* `Conflict`: 409\n* `Unprocessable`: 422\n* `GeneralError`: 500\n* `NotImplemented`: 501\n* `Unavailable`: 503\n\n**Pro Tip:** Feathers service adapters (ie. mongodb, memory, etc.) already emit the appropriate errors for you. :-)\n\n#### Usage:\n\n```js\nvar feathers = require('feathers');\nvar app = feathers();\n\nvar userService = {\n  find: function(params, callback) {\n\n    // If you were to create an error yourself.\n    callback(new this.app.errors.NotFound('User does not exist'));\n\n    // You can also simply do something like this if you\n    // just want to fire back a simple 500 error with your\n    // custom message.\n    // \n    // callback('A generic server error');\n  },\n\n  setup: function(app){\n    this.app = app;\n  }\n};\n\napp.use('/users', userService)\n   .configure(feathers.errors());\n```\n\n#### 404 Handling:\n\nWe have conveniently created a basic 404 middleware already for you. If you want to override it, do this:\n\n```js\nvar feathers = require('feathers');\nvar app = feathers();\n\napp.use('/users', userService)\n   .configure(feathers.errors({\n      fourOhFour: function(req, res, next){\n        // Handle your 404's some special way\n      }\n   }));\n```\n\n#### Custom Error Handling:\n\nWe already have an error handler that gets added to the middleware stack when you call `feathers.errors()`. However, if you want customize how you handle errors you can do so like this:\n\n```js\nvar feathers = require('feathers');\nvar app = feathers();\n\napp.use('/users', userService)\n   .configure(feathers.errors({\n      handler: function(req, res, next){\n        // Handle your errors the way you want\n      }\n   }));\n```\n\n## Examples\nSee [examples directory](https://github.com/feathersjs/feathers-errors/tree/master/examples).\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n__0.2.0__\n\n- Adding support for mongoose errors [Issue #5](https://github.com/feathersjs/feathers-errors/issues/5).\n\n__0.1.4__\n\n- Adding more error types\n- Changing `missing` to `fourOhFour`\n- Making library feathers core compatible\n\n__0.1.3__\n\n- Adding a default error page\n\n__0.1.2__\n\n- Minor bug fixes\n\n__0.1.1__\n\n- Exposing error types directly via `var types = require('feathers-errors').types;`\n\n__0.1.0__\n\n- Initial release\n\n## License\nCopyright (c) 2014 [Eric Kryski](https://github.com/ekryski)\nLicensed under the [MIT license](https://github.com/feathersjs/feathers-errors/blob/master/LICENSE-MIT).\n",
  "readmeFilename": "README.md",
  "_id": "feathers-errors@0.2.1",
  "_from": "feathers-errors@>=0.2.0"
}
