var Rule, StyleSheet;

Rule = require('./Rule');

module.exports = StyleSheet = (function() {
  var self;

  self = StyleSheet;

  function StyleSheet() {
    this._rulesBySelector = {};
  }

  StyleSheet.prototype.setRule = function(selector, styles) {
    var key, val;
    if (typeof selector === 'string') {
      this._setRule(selector, styles);
    } else if (typeof selector === 'object') {
      for (key in selector) {
        val = selector[key];
        this._setRule(key, val);
      }
    }
    return this;
  };

  StyleSheet.prototype._setRule = function(s, styles) {
    var selector, _i, _len, _ref;
    _ref = self.splitSelectors(s);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      selector = _ref[_i];
      this._setSingleRule(selector, styles);
    }
    return this;
  };

  StyleSheet.prototype._setSingleRule = function(s, styles) {
    var rule, selector;
    selector = self.normalizeSelector(s);
    if (!(rule = this._rulesBySelector[selector])) {
      rule = new Rule(selector);
      this._rulesBySelector[selector] = rule;
    }
    rule.setStyles(styles);
    return this;
  };

  StyleSheet.prototype.getRulesFor = function(el) {
    var rule, rules, selector, _ref;
    rules = [];
    _ref = this._rulesBySelector;
    for (selector in _ref) {
      rule = _ref[selector];
      if (rule.selector.matches(el)) {
        rules.push(rule);
      }
    }
    return rules;
  };

  StyleSheet.normalizeSelector = function(selector) {
    return selector.replace(/[\s]+/g, ' ').replace(/[\s]*([>\,\+]{1})[\s]*/g, '$1').trim();
  };

  StyleSheet.splitSelectors = function(s) {
    return s.trim().split(',');
  };

  return StyleSheet;

})();
