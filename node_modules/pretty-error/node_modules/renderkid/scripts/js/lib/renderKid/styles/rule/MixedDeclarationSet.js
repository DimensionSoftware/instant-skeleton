var MixedDeclarationSet,
  __slice = [].slice;

module.exports = MixedDeclarationSet = (function() {
  var self;

  self = MixedDeclarationSet;

  MixedDeclarationSet.mix = function() {
    var mixed, ruleSets, rules, _i, _len;
    ruleSets = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    mixed = new self;
    for (_i = 0, _len = ruleSets.length; _i < _len; _i++) {
      rules = ruleSets[_i];
      mixed.mixWithList(rules);
    }
    return mixed;
  };

  function MixedDeclarationSet() {
    this._declarations = {};
  }

  MixedDeclarationSet.prototype.mixWithList = function(rules) {
    var rule, _i, _len;
    rules.sort(function(a, b) {
      return a.selector.priority > b.selector.priority;
    });
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      this._mixWithRule(rule);
    }
    return this;
  };

  MixedDeclarationSet.prototype._mixWithRule = function(rule) {
    var dec, prop, _ref;
    _ref = rule.styles._declarations;
    for (prop in _ref) {
      dec = _ref[prop];
      this._mixWithDeclaration(dec);
    }
  };

  MixedDeclarationSet.prototype._mixWithDeclaration = function(dec) {
    var cur;
    cur = this._declarations[dec.prop];
    if ((cur != null) && cur.important && !dec.important) {
      return;
    }
    this._declarations[dec.prop] = dec;
  };

  MixedDeclarationSet.prototype.get = function(prop) {
    if (prop == null) {
      return this._declarations;
    }
    if (this._declarations[prop] == null) {
      return null;
    }
    return this._declarations[prop].val;
  };

  MixedDeclarationSet.prototype.toObject = function() {
    var dec, obj, prop, _ref;
    obj = {};
    _ref = this._declarations;
    for (prop in _ref) {
      dec = _ref[prop];
      obj[prop] = dec.val;
    }
    return obj;
  };

  return MixedDeclarationSet;

})();
