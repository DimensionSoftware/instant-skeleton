var RenderKid, match, strip;

require('./_prepare');

RenderKid = mod('RenderKid');

strip = mod('AnsiPainter').strip;

match = (function() {
  var r;
  r = new RenderKid;
  r.style({
    span: {
      display: 'inline'
    },
    div: {
      display: 'block'
    }
  });
  return match = function(input, expected) {
    return strip(r.render(input)).should.equal(expected.trim());
  };
})();

describe("constructor()");

it("should work", function() {
  return new RenderKid;
});

describe("whitespace management - inline");

it("shouldn't put extra whitespaces", function() {
  var expected, input;
  input = "\na<span>b</span>c\n";
  expected = "\nabc\n";
  return match(input, expected);
});

it("should allow 1 whitespace character on each side", function() {
  var expected, input;
  input = "\na<span>   b     </span>c\n";
  expected = "\na b c\n";
  return match(input, expected);
});

it("should eliminate extra whitespaces inside text", function() {
  var expected, input;
  input = "\na<span>b1 \n  b2</span>c\n";
  expected = "\nab1 b2c\n";
  return match(input, expected);
});

it("should allow line breaks with <br />", function() {
  var expected, input;
  input = "\na<span>b1<br />b2</span>c\n";
  expected = "\nab1\nb2c\n";
  return match(input, expected);
});

it("should allow line breaks with &nl;", function() {
  var expected, input;
  input = "\na<span>b1&nl;b2</span>c\n";
  expected = "\nab1\nb2c\n";
  return match(input, expected);
});

it("should allow whitespaces with &sp;", function() {
  var expected, input;
  input = "\na<span>b1&sp;b2</span>c\n";
  expected = "\nab1 b2c\n";
  return match(input, expected);
});
