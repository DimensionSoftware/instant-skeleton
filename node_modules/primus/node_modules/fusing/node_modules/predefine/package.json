{
  "name": "predefine",
  "version": "0.1.1",
  "description": "Predefine your Object.defineProperties to create a more human readable API.",
  "main": "index.js",
  "scripts": {
    "test": "mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bigpipe/predefine.git"
  },
  "keywords": [
    "predefine",
    "define",
    "object",
    "defineProperties",
    "defineProperties",
    "configurable",
    "writable",
    "get",
    "set",
    "getters",
    "setters",
    "inherit"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "dependencies": {
    "extendable": "0.0.x"
  },
  "devDependencies": {
    "pre-commit": "0.0.x",
    "mocha": "1.16.x",
    "chai": "1.8.x"
  },
  "readme": "# predefine\n\n[![Build Status](https://travis-ci.org/bigpipe/predefine.png)](https://travis-ci.org/bigpipe/predefine)\n\nWhen creating objects or prototypes using `Object.defineProperties` or\n`Object.defineProperty` it make your code look really verbose by all the\nproperty descriptions that it needs. Most of the time, they are the same. They\neither make your properties writable, readable or prevents them from being\nenumerable. So basically:\n\nPredefine makes `Object.defineProperties` your human readable and manageable.\n\n## Installation\n\n```\nnpm install --save predefine\n```\n\n## Getting started\n\nLet's start with a basic example of predefine usage:\n\n```\nvar predefine = require('predefine');\n\nfunction Base() {\n  var readable = predefine(this, { configurable: false, enumerable: false })\n    , writable = predefine(this, predefine.WRITABLE);\n\n  readable('prop', 'value');\n  writable('data', []);\n}\n\nBase.writable = predefine(Base.prototype, predefine.WRITABLE);\n\nBase.writable('foo', 'bar');\n```\n\nAs you can see from the snippet above, it's really easy to see which properties\nare made readable and which one's are writable.\n\n### Predefine.extend\n\nThis allows you to add `Backbone` inspired `.extend` functionality to your\nconstructors. This makes inheriting a lot easier and readable. See the\n`extendable` module in npm for information.\n\n```js\nfunction Foo() {}\nFoo.extend = predefine.extend;\n\nvar Bar = Foo.extend({\n  method: function () {}\n});\n```\n\n### Predefine.descriptor\n\nTest if a given object is a valid `Object` description to it can be used with\n`Object.defineProperty`, `Object.defineProperties` and `Object.create`.\n\n```js\npredefine.descriptor({ foo: 'bar' });                       // false\npredefine.descriptor({ value: 'bar' });                     // true\npredefine.descriptor({ value: 'bar', enumerable: false });  // true\npredefine.descriptor({ value: 'bar', foo: 'bar' });         // false\n```\n\n### Predefine.create\n\nThis is a simple helper function to create descriptions that can be used within\n`Object.create` and `Object.defineProperties`.\n\n```js\nvar data = Object.create(null, predefine.create('foo', { \n  value: 'bar' \n}));\n\nvar data = Object.create(null, predefine.create('foo', {\n  value: 'bar'\n}, predefine.READABLE));\n\nvar data = Object.create(null, predefine.create('foo', 'bar', predefine.READABLE));\n```\n\n### Predefine.remove\n\nRemoves all enumerable properties from a given object, with the ability to keep\nwhite listed properties.\n\n```js\nvar data = { foo: 'bar', bar: 'foo' };\n\npredefine.remove(data);           // The data variable is now an empty object.\npredefine.remove(data, ['foo']);  // The foo property is kept.\n\nvar readable(data);\nreadable('baz', 'baz');\n\npredefine.remove(data);           // Only `baz` is left.\n```\n\n### Predefine.merge\n\nMerge two objects in to one single object. This supports deep merging.\n\n```js\nvar result = predefine.merge({ foo: 'bar' }, { bar: 'foo' });\n```\n\n### Predefine.mixin\n\nMixin two Objects, which also transfers properties that are set using\nObject.defineProperty.\n\n```js\nvar result = predefine.mixin({ foo: 'bar' }, { bar: 'foo' });\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bigpipe/predefine/issues"
  },
  "homepage": "https://github.com/bigpipe/predefine",
  "_id": "predefine@0.1.1",
  "dist": {
    "shasum": "bdea730b530a5400a28e050fb192443c9f82da75"
  },
  "_from": "predefine@0.1.x",
  "_resolved": "https://registry.npmjs.org/predefine/-/predefine-0.1.1.tgz"
}
