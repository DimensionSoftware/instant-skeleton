{
  "name": "access-control",
  "version": "0.0.5",
  "description": "Easily handle HTTP Access Control (CORS) in your applications",
  "main": "index.js",
  "scripts": {
    "test": "mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/primus/access-control"
  },
  "keywords": [
    "CORS",
    "HTTP",
    "Access",
    "Control",
    "Access",
    "Control",
    "Allow",
    "Origin",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Max-Age"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/primus/access-control/issues"
  },
  "homepage": "https://github.com/primus/access-control",
  "dependencies": {
    "setheader": "0.0.x",
    "ms": "~0.6.2"
  },
  "devDependencies": {
    "pre-commit": "0.0.x",
    "chai": "1.9.x",
    "mocha": "1.17.x",
    "request": "~2.34.0"
  },
  "readme": "# HTTP Access-Control (CORS)\n\n[![Build Status](https://travis-ci.org/primus/access-control.svg?branch=master)](https://travis-ci.org/primus/access-control)\n[![NPM version](https://badge.fury.io/js/access-control.svg)](http://badge.fury.io/js/access-control)\n\n`access-control` implements HTTP Access Control, which more commonly known as\nCORS according to the W3 specification. The code is dead simple, easy to\nunderstand and therefor also easy to contribute to. `access-control` comes with\na really simple API, so it's super simple, super awesome, super stable. All you\nexpect from a small building block module as this.\n\n## Installation\n\n```\nnpm install --save access-control\n```\n\n## Usage\n\nThe module must first be configured before it can be used to add the correct\nCORS information to your HTTP requests. This is done by suppling the module with\noptions.\n\n```js\n'use strict';\n\nvar access = require('access-control');\n```\n\nAfter requiring the module you can supply the returned function with an options\nobject which can contain the following properties:\n\n<dl>\n  <dt>origins</dt>\n  <dd>\n    An Array or comma separated list of origins that are allowed to access the\n    URL. If this option is not supplied it will default to <code>*</code> which\n    will allow every origin.\n  </dd>\n  <dt>methods</dt>\n  <dd>\n    An Array or comma separated list of HTTP methods that can be used to access\n    the URL. This defaults to GET, HEAD, PUT, POST, DELETE and OPTIONS.\n  </dd>\n  <dt>credentials</dt>\n  <dd>\n    Allow sending of authorization and cookie information in the request. If\n    this option is set to <code>true</code> (which is also the default value) in\n    combination with the <code>origins</code> option to set to <code>*</code> we\n    will automatically change the <code>Access-Control-Allow-Origin</code>\n    header to the sent <code>Origin</code> header. As <code>*</code> as origin\n    in combination with <code>true</code> as value is not allowed by the\n    specification.\n  </dd>\n  <dt>maxAge</dt>\n  <dd>\n    The maximum duration that a client can cache the response of the preflight\n    or <code>OPTIONS</code> request. The value can be set in numbers or a human\n    readable string which we will parse with the <strong>ms</strong> module. We\n    default to 30 days.\n  </dd>\n  <dt>headers</dt>\n  <dd>\n    An Array or comma separated list of headers that is allowed to be sent to\n    the server. This option is disabled by default.\n  </dd>\n  <dt>exposed</dt>\n  <dd>\n    An Array or comma separated list of headers that is exposed to the client\n    that makes the request. This option is disabled by default.\n  </dd>\n</dl>\n\n```js\nvar cors = access({\n  maxAge: '1 hour',\n  credentials: true,\n  origins: 'http://example.com'\n});\n```\n\nNow the `cors` variable contains a function that should receive your `request`\nand `response`. So it's as easy as:\n\n```js\nvar http = require('http').createServer(function (req, res) {\n  if (cors(req, res)) return;\n\n  res.end('hello world');\n}).listen(8080);\n```\n\nYou might have noticed that we've added an if statement around our `cors`\nfunction call. This is because the module will be answering the preflight\nrequest for you. So when it returns the **boolean** `true` you don't have to\nrespond the request any more. In addition to the answering the option request is\nalso answer the requests with a `403 Forbidden` when the validation of the\nAccess Control is failing.\n\nIn order to not waste to much bandwidth, the CORS headers will only be added if\nthe request contains an `Origin` header, which should be sent by every request\nthat requires HTTP Access Control information.\n\n## Phonegap & Origin: null\n\nIf you're using Phonegap, your XHR requests will be sent with `Origin: null` as\nOrigin header. In order to resolve this you must add the domain you are\nrequesting to your origin white list:\n\nhttp://docs.phonegap.com/en/1.9.0/guide_whitelist_index.md.html\n\nThis will ensure that the correct headers will be used for these cross\ndomain/origin requests.\n\n## Related reading\n\nIf you're interested in learning more about HTTP Access Control (CORS) here's a\ngood list to get started with:\n\n- [W3C's CORS Spec](http://www.w3.org/TR/cors/)\n- [HTML5 Rocks CORS Tutorial](http://www.html5rocks.com/en/tutorials/cors/)\n- [Mozilla's HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\n- [Mozilla's Server-Side Access Control](https://developer.mozilla.org/en-US/docs/Server-Side_Access_Control)\n- [Enable CORS](http://enable-cors.org)\n- [Same origin policy](http://en.wikipedia.org/wiki/Same_origin_policy)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "access-control@0.0.5",
  "dist": {
    "shasum": "ba3492dbfb58c8ac2ed2f03734eb73a6da3f6b06"
  },
  "_from": "access-control@0.0.x",
  "_resolved": "https://registry.npmjs.org/access-control/-/access-control-0.0.5.tgz"
}
