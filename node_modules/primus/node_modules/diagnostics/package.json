{
  "name": "diagnostics",
  "version": "0.0.4",
  "description": "Tools for debugging your node.js modules and event loop",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec --ui bdd test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/3rd-Eden/diagnostics.git"
  },
  "keywords": [
    "debug",
    "debugger",
    "debugging",
    "diagnostic",
    "diagnostics",
    "event",
    "loop",
    "metrics",
    "stats"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/3rd-Eden/diagnostics/issues"
  },
  "homepage": "https://github.com/3rd-Eden/diagnostics",
  "devDependencies": {
    "assume": "0.0.x",
    "mocha": "1.21.x",
    "pre-commit": "0.0.x"
  },
  "dependencies": {
    "color": "0.7.x",
    "colornames": "0.0.x",
    "env-variable": "0.0.x",
    "kuler": "0.0.x",
    "text-hex": "0.0.x"
  },
  "readme": "# Diagnostics\n\n[![Build Status](https://travis-ci.org/3rd-Eden/diagnostics.svg?branch=master)](https://travis-ci.org/3rd-Eden/diagnostics)\n\nDiagnostics provides a set of tools that is designed to help you with debugging\nyour Node.js and front-end applications. \n\n## Installation\n\n```\nnpm install --save diagnostics\n```\n\nWe're starting out small but every major release will unlock another piece of\nthe puzzle. The following tools are already at your disposal: \n\n## Logging\n\nLogging is something you always need in your applications, if you don't know\nwhat's going on, it's damn hard to fix it. This is especially true with async\nsystems when your stack traces are most likely completely useless. In\ndiagnostics we ship a simple logger which can be turned on and off using\nenvironment variables. So it's out of the way for your users and there when you\nneed it.\n\nThe logger is exposed as function:\n\n```js\nvar log = require('diagnostics')('example');\n\nlog('foo %s', 'bar');\n```\n\nThe first argument in the function is the namespace of you log function. All log\nmessage will be prefixed with. But we also allow a second argument. This can be\nused to configure the logger. The following options can be configured:\n\n- `color`: The color for the namespace, this can be a hex (#FFF) color string or\n  the name of a color. If no color is provided we will generate consistently\n  hashed color from the given namespace and use that instead.\n- `color**s**`: Forcefully enable or disable the use of colors in the log\n  output. If no `colors` boolean is provided we will determine if it's a proper\n  tty and show colors.\n- `stream`: The stream instance we should write our logs to. We default to\n  `process.stdout` (unless you change the default using the `.to` method).\n- `precise`: By default our log timing is rounded up to the nearest number. If\n  you need more precise timing you can set this option to true.\n\n#### Multiple streams\n\nThe beauty of this logger is that it allows a custom stream where you can write\nthe data to. So you can just log it all to a separate server, database and what\nnot. But we don't just allow one stream we allow multiple streams so you might\nwant to log to disk AND just output it in your terminal. The only thing you need\nto do is either use:\n\n```js\nrequire('diagnostics').to([\n  stream1,\n  stream2\n]);\n```\n\nTo set multiple streams as the default streams or supply an array for the logger\nit self:\n\n```js\nvar log = require('diagnostics')('example', { stream: [\n  stream1,\n  stream2\n]});\n\nlog('foo');\n```\n\nIn addition to using the `DEBUG` environment variable you can also the\n`DIAGNOSTICS` environment variable.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "diagnostics@0.0.4",
  "_from": "diagnostics@>=0.0.0 <0.1.0"
}
