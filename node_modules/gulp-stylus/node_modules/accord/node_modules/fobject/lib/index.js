// Generated by CoffeeScript 1.7.1
(function() {
  var File, fs, nodefn, path;

  fs = require('fs');

  path = require('path');

  nodefn = require('when/node');

  File = (function() {

    /**
     * @param {String} path The path to the file. This will be resolved to an
       absolute path, so even if you change your cwd you can still access the same
       file.
     * @param {String} [opts.base=./] Used for relative pathing. This will not be
       resolved to an absolute path. Typically where a glob starts.
     */
    function File(path, opts) {
      var _ref;
      this.path = path;
      if (opts == null) {
        opts = {};
      }
      this.base = (_ref = opts.base) != null ? _ref : './';
      this._resolvePaths();
    }


    /**
     * Normalize & resolve paths. Call if the File.path changes
     * @private
     */

    File.prototype._resolvePaths = function() {
      this.path = path.resolve(this.base, this.path);
      return this.relative = path.relative(this.base, this.path);
    };


    /**
     * Read from the file
     * @param {String|null} [options.encoding=null]
     * @param {String} [options.flag='r']
     * @return {Promise}
     */

    File.prototype.read = function(options) {
      if (options == null) {
        options = {};
      }
      return nodefn.call(fs.readFile, this.path, options);
    };


    /**
     * Write `data` to the file
     * @param {String|Buffer} data
     * @param {String|null} [options.encoding='utf8'] ignored if data is a
       buffer
     * @param {Number} [options.mode=438] default is 0666 in Octal
     * @param {String} [options.flag='w']
     * @return {Promise}
     */

    File.prototype.write = function(data, options) {
      if (options == null) {
        options = {};
      }
      return nodefn.call(fs.writeFile, this.path, data, options);
    };


    /**
     * Append `data` to the file
     * @param {String|Buffer} data
     * @param {String|null} [options.encoding='utf8'] ignored if data is a
       buffer
     * @param {Number} [options.mode=438] default is 0666 in Octal
     * @param {String} [options.flag='w']
     * @return {Promise}
     */

    File.prototype.append = function(data, options) {
      if (options == null) {
        options = {};
      }
      return nodefn.call(fs.appendFile, this.path, data, options);
    };


    /**
     * Rename the file
     * @param {String} newPath The new path for the file. Will be resolved
       relative to File.base.
     * @return {Promise}
     */

    File.prototype.rename = function(newPath) {
      newPath = path.resolve(this.base, newPath);
      return nodefn.call(fs.rename, this.path, newPath).then((function(_this) {
        return function() {
          _this.path = newPath;
          return _this._resolvePaths();
        };
      })(this));
    };


    /**
     * Delete the file
     * @return {Promise}
     */

    File.prototype.unlink = function() {
      return nodefn.call(fs.unlink, this.path);
    };


    /**
     * Return a Stat object for the file
     * @return {Promise}
     */

    File.prototype.stat = function() {
      return nodefn.call(fs.stat, this.path);
    };


    /**
     * Get the extension of a file
     * @return {String}
     */

    File.prototype.extname = function() {
      return path.extname(this.path);
    };


    /**
     * Get the dirname of the file
     * @return {String}
     */

    File.prototype.dirname = function() {
      return path.dirname(this.path);
    };

    return File;

  })();

  module.exports = File;

}).call(this);
