/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded chunks
/******/ 	// "1" means "already loaded"
/******/ 	var installedChunks = {
/******/ 		0:1
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		if(installedChunks[chunkId] === 1) callback.call(null, __webpack_require__);
/******/ 		else if(!installedChunks[chunkId]) {
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var filename = __dirname + "/" + chunkId + ".bundle.js";
/******/ 			require('fs').readFile(filename, 'utf-8',  function(err, content) {
/******/ 				if(err) { if(__webpack_require__.onError) return __webpack_require__.onError(err); else throw err; }
/******/ 				var chunk = {};
/******/ 				require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\n})', filename)(chunk, require, require('path').dirname(filename), filename);
/******/ 				var moreModules = chunk.modules, chunkIds = chunk.ids;
/******/ 				for(var moduleId in moreModules) {
/******/ 					var _m = moreModules[moduleId];
/******/
/******/ 					// Check if module is deduplicated
/******/ 					switch(typeof _m) {
/******/ 					case "number":
/******/ 						// Module is a copy of another module
/******/ 						modules[moduleId] = modules[_m];
/******/ 						break;
/******/ 					case "object":
/******/ 						// Module can be created from a template
/******/ 						modules[moduleId] = (function(_m) {
/******/ 							var args = _m.slice(1), templateId = _m[0];
/******/ 							return function (a,b,c) {
/******/ 								modules[templateId].apply(this, [a,b,c].concat(args));
/******/ 							};
/******/ 						}(_m));
/******/ 						break;
/******/ 					default:
/******/ 						// Normal module
/******/ 						modules[moduleId] = _m;
/******/ 					}
/******/ 				}
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < chunkIds.length; i++) {
/******/ 					if(Array.isArray(installedChunks[chunkIds[i]]))
/******/ 						callbacks = callbacks.concat(installedChunks[chunkIds[i]]);
/******/ 					installedChunks[chunkIds[i]] = 1;
/******/ 				}
/******/ 				for(i = 0; i < callbacks.length; i++)
/******/ 					callbacks[i].call(null, __webpack_require__);
/******/ 			});
/******/ 		} else installedChunks[chunkId].push(callback);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		switch(typeof modules[i]) {
		case "number":
			// Module is a copy of another module
			modules[i] = modules[modules[i]];
			break;
		case "object":
			// Module can be created from a template
			modules[i] = (function(_m) {
				var args = _m.slice(1), fn = modules[_m[0]];
				return function (a,b,c) {
					fn.apply(null, [a,b,c].concat(args));
				};
			}(modules[i]));
		}
	}
	return modules;
}([
/* 0 */
/*!*********************************!*\
  !*** ./chunks/runtime/index.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	it("should handle duplicate chunks", function(done) {
		var firstOne = false, secondOne = false;
		__webpack_require__.e/*nsure*/(1, function(require) {
			__webpack_require__(/*! ./acircular */ 1);
			__webpack_require__(/*! ./duplicate */ 2);
			__webpack_require__(/*! ./duplicate2 */ 3);
			firstOne = true;
			if(secondOne) done();
		});
		__webpack_require__.e/*nsure*/(6, function(require) {
			__webpack_require__(/*! ./acircular2 */ 4);
			__webpack_require__(/*! ./duplicate */ 2);
			__webpack_require__(/*! ./duplicate2 */ 3);
			secondOne = true;
			if(firstOne) done();
		});
	});

	it("should not load a chunk which is included in a already loaded one", function(done) {
		var async = false;
		__webpack_require__.e/*nsure*/(7, function(require) {
			async.should.be.eql(true);
			loadChunk();
		});
		async = true;
		function loadChunk() {
			var sync = true;
			__webpack_require__.e/*nsure*/(8, function(require) {
				sync.should.be.eql(true);
				done();
			});
			sync = false;
		}
	});


/***/ }
/******/ ])))